#!/usr/bin/env python
# Description:
# ShellPop is program to aid penetration testers
# generating quick and dirty reverse/bind shell 
# code to get on with the pentests.
# ==========
# History:
# Written by zc00l in 2018-03-7

# Contributors
# ===================================================
# LowFuel contributed to the project in 27/04/2018
#   Github: https://github.com/SouAquele
# Touhid Shaik joined the project in 29/04/2018
#   Github: https://github.com/touhidshaikh


import urllib
from sys import exit
from argparse import ArgumentParser
from sys import stderr

# package import
from shellpop import *


# Get current Operational System
os = OperationalSystem().OS

# This works exclusively on Linux, so we adapt to work in Windows too!
def info(msg):
    if os == "linux":
        msg = "[\033[094m+\033[0m] {0}".format(msg)
    else:
        msg = "[+] {0}".format(msg)
    return msg

def error(msg):
    if os == "linux":
        msg = "[\033[091m!\033[0m] {0}".format(msg)
    else:
        msg = "[!] {0}".format(msg)
    return msg

write=stderr.write
flush=stderr.flush
version = 0.337 # updated 29/04/2018


AVAILABLE_SHELLS = [
        
        # Bind shell list
        {
            1:("Python TCP", BIND_PYTHON_TCP),
            2:("Python UDP", BIND_PYTHON_UDP),
            3:("Perl TCP", BIND_PERL_TCP),
            4:("Perl UDP", BIND_PERL_UDP),
            5:("PHP TCP", BIND_PHP_TCP),
            6:("PHP UDP", BIND_PHP_UDP),
            7:("Ruby TCP", BIND_RUBY_TCP),
            8:("Ruby UDP", BIND_RUBY_UDP),
            9:("Netcat (OpenBSD) TCP", BIND_NETCAT_TCP),
            10:("Netcat+coproc (OpenBSD) UDP", BIND_NETCAT_OPENBSD_UDP),
            11:("Netcat (Traditional) TCP", BIND_NETCAT_TRADITIONAL_TCP),
            12:("Powershell TCP", BIND_POWERSHELL_TCP),
        },

        # Reverse shell list
        {
            1: ("Python TCP", REV_PYTHON_TCP),
            2: ("Python UDP", REV_PYTHON_UDP),
            3: ("PHP TCP", REV_PHP_TCP),
            4: ("Ruby TCP", REV_RUBY_TCP),
            5: ("Perl TCP 01", REV_PERL_TCP),
            6: ("Perl TCP 02", REV_PERL_TCP_2),
            7: ("Perl UDP [nc -lkvup PORT]", REV_PERL_UDP),
            8: ("Bash TCP", BASH_TCP),
            9: ("Powershell TCP", REV_POWERSHELL_TCP),
            10: ("TCLsh TCP", REVERSE_TCLSH),
            11: ("Ncat TCP", REVERSE_NCAT),
            12: ("Netcat (Traditional) TCP", REVERSE_NC_TRADITIONAL_1),
            13: ("Netcat (OpenBSD) mkfifo TCP", REVERSE_MKFIFO_NC),
            14: ("Netcat (OpenBSD) mknod TCP", REVERSE_MKNOD_NC),
            15: ("Telnet mkfifo TCP", REVERSE_MKFIFO_TELNET),
            16: ("Telnet mknod TCP", REVERSE_MKNOD_TELNET),
            17: ("socat TCP", REVERSE_SOCAT),
            18: ("awk TCP", REVERSE_AWK),
        }
    ]

bind_shells = AVAILABLE_SHELLS[0]
reverse_shells = AVAILABLE_SHELLS[1]
    
def proto_colorize(shell_name):
    """
    This code is responsible to colorize
    the protocol of bind/reverse shells name.
    """
    proto_avail = [
            ("UDP", "94"), 
            ("TCP", "93")] # available protocols to colorize.
    for proto in proto_avail:
        if proto[0] in shell_name:
            shell_name = shell_name.replace(proto[0], "\033[{0}m{1}\033[0m".format(proto[1], proto[0]))
    return shell_name

def list_shells():
    bind_shells = AVAILABLE_SHELLS[0]
    reverse_shells = AVAILABLE_SHELLS[1]
    
    write(info("\033[1mBind shells\033[0m:\n\n"))
    for i in range(1, len(bind_shells)+1):
        obj = bind_shells[i]
        print("{0}. {1}".format(str(i).rjust(3), proto_colorize(obj[0])))
    
    write("\n\n")
    write(info("\033[1mReverse shells\033[0m:\n\n"))
    for i in range(1, len(reverse_shells)+1):
        obj = reverse_shells[i]
        print("{0}. {1}".format(str(i).rjust(3), proto_colorize(obj[0])))

    return 0


def header():
    contributors = ["@zc00l", "@touhidshaik", "@lowfuel"]
    return "\033[093mshellpop\033[0m v{0}\n\033[93mcontributors\033[0m: {1}\n\n".format(version, ','.join([x for x in contributors]))

def select_shell(args, shell_type, shell_index):
    if shell_type == "reverse":
        for shell in reverse_shells:
            obj = reverse_shells[shell]
            if shell == shell_index:
                code = obj[1]
                name = obj[0]
                rev = ReverseShell(name, args, code)
                generated = rev.get()
                return generated

    elif shell_type == "bind":
        for shell in bind_shells:
            obj = bind_shells[shell]
            if shell == shell_index:
                code = obj[1]
                name = obj[0]
                bind = BindShell(name, args, code)
                generated = bind.get()
                return generated


def main():
    parser = ArgumentParser()
    parser.add_argument("--list", help="List of available shells", action="store_true")
    parser.add_argument("--base64", action="store_true", required=False, help="Encode command in base64.")
    parser.add_argument("--urlencode", action="store_true", required=False, help="Encode the command in URL encoding.")
    parser.add_argument("--host", type=str, help="IP to be used in connectback (reverse) shells.")
    parser.add_argument("--port", type=int, help="Port to be used in reverse/bind shell code.")
    parser.add_argument("--number", type=int, help="Shell code index number", required=False)
    parser.add_argument("--reverse", action="store_true")
    parser.add_argument("--bind", action="store_true")

    args = parser.parse_args()
    if args.list == True:
        write(header())
        list_shells()
        exit(0)

    if type(args.number) is not int:
        write(header())
        print(error("Error: You need to select a shell using --number. To list shells, use: --list"))
        exit(1)

    if args.reverse is True and args.bind is True:
        write(header())
        print(error("Error: You must select --reverse or --bind"))
        exit(1)

    if args.reverse is not True and args.bind is not True:
        write(header())
        print(error("Error: You can't select both --reverse and --bind options."))
        exit(1)

    if args.reverse is True:
        if args.host is None:
            print(error("Error: You need to set the listener IP address with --host"))
            exit(1)
        if args.port is None:
            print(error("Error: You need to set the listener port number with --port"))
            exit(1)
        print(select_shell(args, "reverse", args.number))
    else:
        if args.port is None:
            print(error("Error: You need to set the remote port number to listen with --port"))
            exit(1)
        print(select_shell(args, "bind", args.number))

    return 0x0

if __name__ == "__main__":
    main()

